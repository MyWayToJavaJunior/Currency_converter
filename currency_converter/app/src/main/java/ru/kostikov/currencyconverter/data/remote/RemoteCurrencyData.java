package ru.kostikov.currencyconverter.data.remote;


import android.content.Context;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v4.app.LoaderManager;
import android.support.v4.content.Loader;


import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;
import org.xmlpull.v1.XmlPullParserFactory;

import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;

import ru.kostikov.currencyconverter.data.Constants;
import ru.kostikov.currencyconverter.data.CurrencyData;
import ru.kostikov.currencyconverter.data.CurrencyDataResponse;
import ru.kostikov.currencyconverter.data.CurrencyDataSource;
import ru.kostikov.currencyconverter.data.CurrencyXmlParser;
import ru.kostikov.currencyconverter.util.Injector;

/**
 * Created by user on 22.04.2017.
 */

public class RemoteCurrencyData implements CurrencyDataSource, LoaderManager.LoaderCallbacks<String> {

    private static final int LOADER_ID = 1;

    private HashMap<String, CurrencyData> mCurrencyDataHashMap = new HashMap<>(0);

    private LoaderManager mLoaderManager;

    private CurrencyDataResponse mCurrencyDataResponse;

    public RemoteCurrencyData(LoaderManager loaderManager) {

        Bundle bundle = new Bundle();
        bundle.putString(RemoteXmlLoader.ARG_URL, Constants.SERVER_URL);

        mLoaderManager = loaderManager;
        mLoaderManager.initLoader(LOADER_ID, bundle, this);
    }

    @Override
    public void setCurrencyDataResponse(CurrencyDataResponse mCurrencyDataResponse) {
        this.mCurrencyDataResponse = mCurrencyDataResponse;
    }

    /**
     * Gets Map with convert data for currencies
     *
     * @return map with convert data
     */
    @Override
    public void requestCurrencyDataMap() {
        Loader<String> loader;

        loader = mLoaderManager.getLoader(LOADER_ID);
        loader.forceLoad();
    }

    /**
     * Instantiate and return a new Loader for the given ID.
     *
     * @param id   The ID whose loader is to be created.
     * @param args Any arguments supplied by the caller.
     * @return Return a new Loader instance that is ready to start loading.
     */
    @Override
    public Loader<String> onCreateLoader(int id, Bundle args) {
        Loader<String> loader = null;

        if (id == LOADER_ID) {
            loader = new RemoteXmlLoader(Injector.instance().getAppContext(), args);
        }
        return loader;
    }

    /**
     * @param loader The Loader that has finished.
     * @param data   The data generated by the Loader.
     */
    @Override
    public void onLoadFinished(Loader<String> loader, String data) {
        XmlPullParserFactory factory = null;
        try {
            factory = XmlPullParserFactory.newInstance();
            factory.setNamespaceAware(true);
            XmlPullParser xpp = factory.newPullParser();

            xpp.setInput(new StringReader(data));

            if (CurrencyXmlParser.parseConvertDataXml(xpp, this.mCurrencyDataHashMap)){
                // Save to shared preferences
                save(data);

                if (this.mCurrencyDataResponse != null){
                    this.mCurrencyDataResponse.currencyDataResponse(this.mCurrencyDataHashMap);
                }
            }

        } catch (XmlPullParserException e) {
            e.printStackTrace();
        }
    }

    /**
     * Called when a previously created loader is being reset, and thus
     * making its data unavailable.  The application should at this point
     * remove any references it has to the Loader's data.
     *
     * @param loader The Loader that is being reset.
     */
    @Override
    public void onLoaderReset(Loader<String> loader) {

    }

    /**
     * Save data to shared preferences
     * @return true - if save success
     */
    private boolean save(String str) {
        SharedPreferences sPref = Injector.instance().getAppContext().getSharedPreferences(Constants.SHARED_PREF_NAME, Context.MODE_PRIVATE);
        SharedPreferences.Editor ed = sPref.edit();
        ed.putString(Constants.SHARED_PREF_NAME, str);
        return ed.commit();
    }

}
